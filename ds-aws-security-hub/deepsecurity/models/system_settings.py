# coding: utf-8

"""
    Trend Micro Deep Security API

    Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 11.2.225
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.setting_value import SettingValue  # noqa: F401,E501


class SystemSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'web_reputation_setting_event_rank_risk_highly_suspicious': 'SettingValue',
        'firewall_setting_global_stateful_config_id': 'SettingValue',
        'platform_setting_ddan_manual_source_server_url': 'SettingValue',
        'firewall_setting_internet_connectivity_test_expected_content_regex': 'SettingValue',
        'platform_setting_primary_tenant_share_connected_threat_defenses_enabled': 'SettingValue',
        'web_reputation_setting_event_rank_risk_dangerous': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled': 'SettingValue',
        'platform_setting_retain_system_event_duration': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_medium': 'SettingValue',
        'firewall_setting_intranet_connectivity_test_expected_content_regex': 'SettingValue',
        'log_inspection_setting_retain_event_duration': 'SettingValue',
        'platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled': 'SettingValue',
        'platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout': 'SettingValue',
        'integrity_monitoring_setting_retain_event_duration': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled': 'SettingValue',
        'web_reputation_setting_event_rank_risk_blocked_by_administrator_rank': 'SettingValue',
        'anti_malware_setting_event_email_body_template': 'SettingValue',
        'log_inspection_setting_event_rank_severity_critical': 'SettingValue',
        'platform_setting_ddan_use_proxy_enabled': 'SettingValue',
        'platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled': 'SettingValue',
        'anti_malware_setting_event_email_enabled': 'SettingValue',
        'platform_setting_ddan_proxy_id': 'SettingValue',
        'platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled': 'SettingValue',
        'anti_malware_setting_event_email_recipients': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled': 'SettingValue',
        'firewall_setting_intranet_connectivity_test_url': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_configure_sns_enabled': 'SettingValue',
        'firewall_setting_event_rank_severity_packet_rejection': 'SettingValue',
        'platform_setting_active_sessions_max_exceeded_action': 'SettingValue',
        'log_inspection_setting_event_rank_severity_high': 'SettingValue',
        'platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_critical': 'SettingValue',
        'platform_setting_active_sessions_max': 'SettingValue',
        'log_inspection_setting_event_rank_severity_low': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled': 'SettingValue',
        'firewall_setting_internet_connectivity_test_interval': 'SettingValue',
        'platform_setting_ddan_source_option': 'SettingValue',
        'anti_malware_setting_event_email_subject': 'SettingValue',
        'application_control_setting_serve_rulesets_from_relays_enabled': 'SettingValue',
        'integrity_monitoring_setting_event_rank_severity_high': 'SettingValue',
        'platform_setting_primary_tenant_share_managed_detect_responses_enabled': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled': 'SettingValue',
        'intrusion_prevention_setting_retain_event_duration': 'SettingValue',
        'platform_setting_syslog_config_id': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled': 'SettingValue',
        'platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled': 'SettingValue',
        'firewall_setting_internet_connectivity_test_url': 'SettingValue',
        'log_inspection_setting_event_rank_severity_medium': 'SettingValue',
        'web_reputation_setting_retain_event_duration': 'SettingValue',
        'anti_malware_setting_retain_event_duration': 'SettingValue',
        'platform_setting_retain_server_log_duration': 'SettingValue',
        'platform_setting_ddan_auto_submission_enabled': 'SettingValue',
        'integrity_monitoring_setting_event_rank_severity_medium': 'SettingValue',
        'platform_setting_ddan_manual_source_api_key': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_configure_siem_enabled': 'SettingValue',
        'firewall_setting_event_rank_severity_log_only': 'SettingValue',
        'platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled': 'SettingValue',
        'application_control_setting_retain_event_duration': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_error': 'SettingValue',
        'firewall_setting_retain_event_duration': 'SettingValue',
        'web_reputation_setting_event_rank_risk_untested': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_high': 'SettingValue',
        'platform_setting_ddan_submission_enabled': 'SettingValue',
        'firewall_setting_event_rank_severity_deny': 'SettingValue',
        'web_reputation_setting_event_rank_risk_suspicious': 'SettingValue',
        'intrusion_prevention_setting_event_rank_severity_filter_low': 'SettingValue',
        'platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled': 'SettingValue',
        'integrity_monitoring_setting_event_rank_severity_low': 'SettingValue',
        'integrity_monitoring_setting_event_rank_severity_critical': 'SettingValue'
    }

    attribute_map = {
        'web_reputation_setting_event_rank_risk_highly_suspicious': 'webReputationSettingEventRankRiskHighlySuspicious',
        'firewall_setting_global_stateful_config_id': 'firewallSettingGlobalStatefulConfigId',
        'platform_setting_ddan_manual_source_server_url': 'platformSettingDdanManualSourceServerUrl',
        'firewall_setting_internet_connectivity_test_expected_content_regex': 'firewallSettingInternetConnectivityTestExpectedContentRegex',
        'platform_setting_primary_tenant_share_connected_threat_defenses_enabled': 'platformSettingPrimaryTenantShareConnectedThreatDefensesEnabled',
        'web_reputation_setting_event_rank_risk_dangerous': 'webReputationSettingEventRankRiskDangerous',
        'platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled': 'platformSettingPrimaryTenantAllowTenantRunPortScanEnabled',
        'platform_setting_retain_system_event_duration': 'platformSettingRetainSystemEventDuration',
        'intrusion_prevention_setting_event_rank_severity_filter_medium': 'intrusionPreventionSettingEventRankSeverityFilterMedium',
        'firewall_setting_intranet_connectivity_test_expected_content_regex': 'firewallSettingIntranetConnectivityTestExpectedContentRegex',
        'log_inspection_setting_retain_event_duration': 'logInspectionSettingRetainEventDuration',
        'platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled': 'platformSettingTenantAutoRevokeImpersonationByPrimaryTenantEnabled',
        'platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout': 'platformSettingTenantAutoRevokeImpersonationByPrimaryTenantTimeout',
        'integrity_monitoring_setting_retain_event_duration': 'integrityMonitoringSettingRetainEventDuration',
        'platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled': 'platformSettingPrimaryTenantAllowTenantUseScheduledRunScriptTaskEnabled',
        'web_reputation_setting_event_rank_risk_blocked_by_administrator_rank': 'webReputationSettingEventRankRiskBlockedByAdministratorRank',
        'anti_malware_setting_event_email_body_template': 'antiMalwareSettingEventEmailBodyTemplate',
        'log_inspection_setting_event_rank_severity_critical': 'logInspectionSettingEventRankSeverityCritical',
        'platform_setting_ddan_use_proxy_enabled': 'platformSettingDdanUseProxyEnabled',
        'platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled': 'platformSettingPrimaryTenantLockAndHideTenantSmtpTabEnabled',
        'anti_malware_setting_event_email_enabled': 'antiMalwareSettingEventEmailEnabled',
        'platform_setting_ddan_proxy_id': 'platformSettingDdanProxyId',
        'platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled': 'platformSettingPrimaryTenantLockAndHideTenantStorageTabEnabled',
        'anti_malware_setting_event_email_recipients': 'antiMalwareSettingEventEmailRecipients',
        'platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled': 'platformSettingPrimaryTenantAllowTenantUseDefaultRelayGroupEnabled',
        'firewall_setting_intranet_connectivity_test_url': 'firewallSettingIntranetConnectivityTestUrl',
        'platform_setting_primary_tenant_allow_tenant_configure_sns_enabled': 'platformSettingPrimaryTenantAllowTenantConfigureSnsEnabled',
        'firewall_setting_event_rank_severity_packet_rejection': 'firewallSettingEventRankSeverityPacketRejection',
        'platform_setting_active_sessions_max_exceeded_action': 'platformSettingActiveSessionsMaxExceededAction',
        'log_inspection_setting_event_rank_severity_high': 'logInspectionSettingEventRankSeverityHigh',
        'platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled': 'platformSettingTenantUseDefaultRelayGroupFromPrimaryTenantEnabled',
        'platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled': 'platformSettingPrimaryTenantAllowTenantSyncWithCloudAccountEnabled',
        'intrusion_prevention_setting_event_rank_severity_filter_critical': 'intrusionPreventionSettingEventRankSeverityFilterCritical',
        'platform_setting_active_sessions_max': 'platformSettingActiveSessionsMax',
        'log_inspection_setting_event_rank_severity_low': 'logInspectionSettingEventRankSeverityLow',
        'platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled': 'platformSettingPrimaryTenantAllowTenantAddVmwareVcenterEnabled',
        'firewall_setting_internet_connectivity_test_interval': 'firewallSettingInternetConnectivityTestInterval',
        'platform_setting_ddan_source_option': 'platformSettingDdanSourceOption',
        'anti_malware_setting_event_email_subject': 'antiMalwareSettingEventEmailSubject',
        'application_control_setting_serve_rulesets_from_relays_enabled': 'applicationControlSettingServeRulesetsFromRelaysEnabled',
        'integrity_monitoring_setting_event_rank_severity_high': 'integrityMonitoringSettingEventRankSeverityHigh',
        'platform_setting_primary_tenant_share_managed_detect_responses_enabled': 'platformSettingPrimaryTenantShareManagedDetectResponsesEnabled',
        'platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled': 'platformSettingPrimaryTenantAllowTenantRunComputerDiscoveryEnabled',
        'intrusion_prevention_setting_retain_event_duration': 'intrusionPreventionSettingRetainEventDuration',
        'platform_setting_syslog_config_id': 'platformSettingSyslogConfigId',
        'platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled': 'platformSettingPrimaryTenantAllowTenantSynchronizeLdapDirectoriesEnabled',
        'platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled': 'platformSettingTenantAllowImpersonationByPrimaryTenantEnabled',
        'platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled': 'platformSettingPrimaryTenantAllowTenantConfigureSnmpEnabled',
        'firewall_setting_internet_connectivity_test_url': 'firewallSettingInternetConnectivityTestUrl',
        'log_inspection_setting_event_rank_severity_medium': 'logInspectionSettingEventRankSeverityMedium',
        'web_reputation_setting_retain_event_duration': 'webReputationSettingRetainEventDuration',
        'anti_malware_setting_retain_event_duration': 'antiMalwareSettingRetainEventDuration',
        'platform_setting_retain_server_log_duration': 'platformSettingRetainServerLogDuration',
        'platform_setting_ddan_auto_submission_enabled': 'platformSettingDdanAutoSubmissionEnabled',
        'integrity_monitoring_setting_event_rank_severity_medium': 'integrityMonitoringSettingEventRankSeverityMedium',
        'platform_setting_ddan_manual_source_api_key': 'platformSettingDdanManualSourceApiKey',
        'platform_setting_primary_tenant_allow_tenant_configure_siem_enabled': 'platformSettingPrimaryTenantAllowTenantConfigureSiemEnabled',
        'firewall_setting_event_rank_severity_log_only': 'firewallSettingEventRankSeverityLogOnly',
        'platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled': 'platformSettingPrimaryTenantLockAndHideTenantDataPrivacyOptionEnabled',
        'application_control_setting_retain_event_duration': 'applicationControlSettingRetainEventDuration',
        'intrusion_prevention_setting_event_rank_severity_filter_error': 'intrusionPreventionSettingEventRankSeverityFilterError',
        'firewall_setting_retain_event_duration': 'firewallSettingRetainEventDuration',
        'web_reputation_setting_event_rank_risk_untested': 'webReputationSettingEventRankRiskUntested',
        'intrusion_prevention_setting_event_rank_severity_filter_high': 'intrusionPreventionSettingEventRankSeverityFilterHigh',
        'platform_setting_ddan_submission_enabled': 'platformSettingDdanSubmissionEnabled',
        'firewall_setting_event_rank_severity_deny': 'firewallSettingEventRankSeverityDeny',
        'web_reputation_setting_event_rank_risk_suspicious': 'webReputationSettingEventRankRiskSuspicious',
        'intrusion_prevention_setting_event_rank_severity_filter_low': 'intrusionPreventionSettingEventRankSeverityFilterLow',
        'platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled': 'platformSettingPrimaryTenantAllowTenantControlImpersonationEnabled',
        'integrity_monitoring_setting_event_rank_severity_low': 'integrityMonitoringSettingEventRankSeverityLow',
        'integrity_monitoring_setting_event_rank_severity_critical': 'integrityMonitoringSettingEventRankSeverityCritical'
    }

    def __init__(self, web_reputation_setting_event_rank_risk_highly_suspicious=None, firewall_setting_global_stateful_config_id=None, platform_setting_ddan_manual_source_server_url=None, firewall_setting_internet_connectivity_test_expected_content_regex=None, platform_setting_primary_tenant_share_connected_threat_defenses_enabled=None, web_reputation_setting_event_rank_risk_dangerous=None, platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled=None, platform_setting_retain_system_event_duration=None, intrusion_prevention_setting_event_rank_severity_filter_medium=None, firewall_setting_intranet_connectivity_test_expected_content_regex=None, log_inspection_setting_retain_event_duration=None, platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled=None, platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout=None, integrity_monitoring_setting_retain_event_duration=None, platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled=None, web_reputation_setting_event_rank_risk_blocked_by_administrator_rank=None, anti_malware_setting_event_email_body_template=None, log_inspection_setting_event_rank_severity_critical=None, platform_setting_ddan_use_proxy_enabled=None, platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled=None, anti_malware_setting_event_email_enabled=None, platform_setting_ddan_proxy_id=None, platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled=None, anti_malware_setting_event_email_recipients=None, platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled=None, firewall_setting_intranet_connectivity_test_url=None, platform_setting_primary_tenant_allow_tenant_configure_sns_enabled=None, firewall_setting_event_rank_severity_packet_rejection=None, platform_setting_active_sessions_max_exceeded_action=None, log_inspection_setting_event_rank_severity_high=None, platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled=None, platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled=None, intrusion_prevention_setting_event_rank_severity_filter_critical=None, platform_setting_active_sessions_max=None, log_inspection_setting_event_rank_severity_low=None, platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled=None, firewall_setting_internet_connectivity_test_interval=None, platform_setting_ddan_source_option=None, anti_malware_setting_event_email_subject=None, application_control_setting_serve_rulesets_from_relays_enabled=None, integrity_monitoring_setting_event_rank_severity_high=None, platform_setting_primary_tenant_share_managed_detect_responses_enabled=None, platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled=None, intrusion_prevention_setting_retain_event_duration=None, platform_setting_syslog_config_id=None, platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled=None, platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled=None, platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled=None, firewall_setting_internet_connectivity_test_url=None, log_inspection_setting_event_rank_severity_medium=None, web_reputation_setting_retain_event_duration=None, anti_malware_setting_retain_event_duration=None, platform_setting_retain_server_log_duration=None, platform_setting_ddan_auto_submission_enabled=None, integrity_monitoring_setting_event_rank_severity_medium=None, platform_setting_ddan_manual_source_api_key=None, platform_setting_primary_tenant_allow_tenant_configure_siem_enabled=None, firewall_setting_event_rank_severity_log_only=None, platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled=None, application_control_setting_retain_event_duration=None, intrusion_prevention_setting_event_rank_severity_filter_error=None, firewall_setting_retain_event_duration=None, web_reputation_setting_event_rank_risk_untested=None, intrusion_prevention_setting_event_rank_severity_filter_high=None, platform_setting_ddan_submission_enabled=None, firewall_setting_event_rank_severity_deny=None, web_reputation_setting_event_rank_risk_suspicious=None, intrusion_prevention_setting_event_rank_severity_filter_low=None, platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled=None, integrity_monitoring_setting_event_rank_severity_low=None, integrity_monitoring_setting_event_rank_severity_critical=None):  # noqa: E501
        """SystemSettings - a model defined in Swagger"""  # noqa: E501

        self._web_reputation_setting_event_rank_risk_highly_suspicious = None
        self._firewall_setting_global_stateful_config_id = None
        self._platform_setting_ddan_manual_source_server_url = None
        self._firewall_setting_internet_connectivity_test_expected_content_regex = None
        self._platform_setting_primary_tenant_share_connected_threat_defenses_enabled = None
        self._web_reputation_setting_event_rank_risk_dangerous = None
        self._platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled = None
        self._platform_setting_retain_system_event_duration = None
        self._intrusion_prevention_setting_event_rank_severity_filter_medium = None
        self._firewall_setting_intranet_connectivity_test_expected_content_regex = None
        self._log_inspection_setting_retain_event_duration = None
        self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled = None
        self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout = None
        self._integrity_monitoring_setting_retain_event_duration = None
        self._platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled = None
        self._web_reputation_setting_event_rank_risk_blocked_by_administrator_rank = None
        self._anti_malware_setting_event_email_body_template = None
        self._log_inspection_setting_event_rank_severity_critical = None
        self._platform_setting_ddan_use_proxy_enabled = None
        self._platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled = None
        self._anti_malware_setting_event_email_enabled = None
        self._platform_setting_ddan_proxy_id = None
        self._platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled = None
        self._anti_malware_setting_event_email_recipients = None
        self._platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled = None
        self._firewall_setting_intranet_connectivity_test_url = None
        self._platform_setting_primary_tenant_allow_tenant_configure_sns_enabled = None
        self._firewall_setting_event_rank_severity_packet_rejection = None
        self._platform_setting_active_sessions_max_exceeded_action = None
        self._log_inspection_setting_event_rank_severity_high = None
        self._platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled = None
        self._platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled = None
        self._intrusion_prevention_setting_event_rank_severity_filter_critical = None
        self._platform_setting_active_sessions_max = None
        self._log_inspection_setting_event_rank_severity_low = None
        self._platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled = None
        self._firewall_setting_internet_connectivity_test_interval = None
        self._platform_setting_ddan_source_option = None
        self._anti_malware_setting_event_email_subject = None
        self._application_control_setting_serve_rulesets_from_relays_enabled = None
        self._integrity_monitoring_setting_event_rank_severity_high = None
        self._platform_setting_primary_tenant_share_managed_detect_responses_enabled = None
        self._platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled = None
        self._intrusion_prevention_setting_retain_event_duration = None
        self._platform_setting_syslog_config_id = None
        self._platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled = None
        self._platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled = None
        self._platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled = None
        self._firewall_setting_internet_connectivity_test_url = None
        self._log_inspection_setting_event_rank_severity_medium = None
        self._web_reputation_setting_retain_event_duration = None
        self._anti_malware_setting_retain_event_duration = None
        self._platform_setting_retain_server_log_duration = None
        self._platform_setting_ddan_auto_submission_enabled = None
        self._integrity_monitoring_setting_event_rank_severity_medium = None
        self._platform_setting_ddan_manual_source_api_key = None
        self._platform_setting_primary_tenant_allow_tenant_configure_siem_enabled = None
        self._firewall_setting_event_rank_severity_log_only = None
        self._platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled = None
        self._application_control_setting_retain_event_duration = None
        self._intrusion_prevention_setting_event_rank_severity_filter_error = None
        self._firewall_setting_retain_event_duration = None
        self._web_reputation_setting_event_rank_risk_untested = None
        self._intrusion_prevention_setting_event_rank_severity_filter_high = None
        self._platform_setting_ddan_submission_enabled = None
        self._firewall_setting_event_rank_severity_deny = None
        self._web_reputation_setting_event_rank_risk_suspicious = None
        self._intrusion_prevention_setting_event_rank_severity_filter_low = None
        self._platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled = None
        self._integrity_monitoring_setting_event_rank_severity_low = None
        self._integrity_monitoring_setting_event_rank_severity_critical = None
        self.discriminator = None

        if web_reputation_setting_event_rank_risk_highly_suspicious is not None:
            self.web_reputation_setting_event_rank_risk_highly_suspicious = web_reputation_setting_event_rank_risk_highly_suspicious
        if firewall_setting_global_stateful_config_id is not None:
            self.firewall_setting_global_stateful_config_id = firewall_setting_global_stateful_config_id
        if platform_setting_ddan_manual_source_server_url is not None:
            self.platform_setting_ddan_manual_source_server_url = platform_setting_ddan_manual_source_server_url
        if firewall_setting_internet_connectivity_test_expected_content_regex is not None:
            self.firewall_setting_internet_connectivity_test_expected_content_regex = firewall_setting_internet_connectivity_test_expected_content_regex
        if platform_setting_primary_tenant_share_connected_threat_defenses_enabled is not None:
            self.platform_setting_primary_tenant_share_connected_threat_defenses_enabled = platform_setting_primary_tenant_share_connected_threat_defenses_enabled
        if web_reputation_setting_event_rank_risk_dangerous is not None:
            self.web_reputation_setting_event_rank_risk_dangerous = web_reputation_setting_event_rank_risk_dangerous
        if platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled = platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled
        if platform_setting_retain_system_event_duration is not None:
            self.platform_setting_retain_system_event_duration = platform_setting_retain_system_event_duration
        if intrusion_prevention_setting_event_rank_severity_filter_medium is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_medium = intrusion_prevention_setting_event_rank_severity_filter_medium
        if firewall_setting_intranet_connectivity_test_expected_content_regex is not None:
            self.firewall_setting_intranet_connectivity_test_expected_content_regex = firewall_setting_intranet_connectivity_test_expected_content_regex
        if log_inspection_setting_retain_event_duration is not None:
            self.log_inspection_setting_retain_event_duration = log_inspection_setting_retain_event_duration
        if platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled is not None:
            self.platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled = platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled
        if platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout is not None:
            self.platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout = platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout
        if integrity_monitoring_setting_retain_event_duration is not None:
            self.integrity_monitoring_setting_retain_event_duration = integrity_monitoring_setting_retain_event_duration
        if platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled = platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled
        if web_reputation_setting_event_rank_risk_blocked_by_administrator_rank is not None:
            self.web_reputation_setting_event_rank_risk_blocked_by_administrator_rank = web_reputation_setting_event_rank_risk_blocked_by_administrator_rank
        if anti_malware_setting_event_email_body_template is not None:
            self.anti_malware_setting_event_email_body_template = anti_malware_setting_event_email_body_template
        if log_inspection_setting_event_rank_severity_critical is not None:
            self.log_inspection_setting_event_rank_severity_critical = log_inspection_setting_event_rank_severity_critical
        if platform_setting_ddan_use_proxy_enabled is not None:
            self.platform_setting_ddan_use_proxy_enabled = platform_setting_ddan_use_proxy_enabled
        if platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled is not None:
            self.platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled
        if anti_malware_setting_event_email_enabled is not None:
            self.anti_malware_setting_event_email_enabled = anti_malware_setting_event_email_enabled
        if platform_setting_ddan_proxy_id is not None:
            self.platform_setting_ddan_proxy_id = platform_setting_ddan_proxy_id
        if platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled is not None:
            self.platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled
        if anti_malware_setting_event_email_recipients is not None:
            self.anti_malware_setting_event_email_recipients = anti_malware_setting_event_email_recipients
        if platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled = platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled
        if firewall_setting_intranet_connectivity_test_url is not None:
            self.firewall_setting_intranet_connectivity_test_url = firewall_setting_intranet_connectivity_test_url
        if platform_setting_primary_tenant_allow_tenant_configure_sns_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_configure_sns_enabled = platform_setting_primary_tenant_allow_tenant_configure_sns_enabled
        if firewall_setting_event_rank_severity_packet_rejection is not None:
            self.firewall_setting_event_rank_severity_packet_rejection = firewall_setting_event_rank_severity_packet_rejection
        if platform_setting_active_sessions_max_exceeded_action is not None:
            self.platform_setting_active_sessions_max_exceeded_action = platform_setting_active_sessions_max_exceeded_action
        if log_inspection_setting_event_rank_severity_high is not None:
            self.log_inspection_setting_event_rank_severity_high = log_inspection_setting_event_rank_severity_high
        if platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled is not None:
            self.platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled = platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled
        if platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled = platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled
        if intrusion_prevention_setting_event_rank_severity_filter_critical is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_critical = intrusion_prevention_setting_event_rank_severity_filter_critical
        if platform_setting_active_sessions_max is not None:
            self.platform_setting_active_sessions_max = platform_setting_active_sessions_max
        if log_inspection_setting_event_rank_severity_low is not None:
            self.log_inspection_setting_event_rank_severity_low = log_inspection_setting_event_rank_severity_low
        if platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled = platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled
        if firewall_setting_internet_connectivity_test_interval is not None:
            self.firewall_setting_internet_connectivity_test_interval = firewall_setting_internet_connectivity_test_interval
        if platform_setting_ddan_source_option is not None:
            self.platform_setting_ddan_source_option = platform_setting_ddan_source_option
        if anti_malware_setting_event_email_subject is not None:
            self.anti_malware_setting_event_email_subject = anti_malware_setting_event_email_subject
        if application_control_setting_serve_rulesets_from_relays_enabled is not None:
            self.application_control_setting_serve_rulesets_from_relays_enabled = application_control_setting_serve_rulesets_from_relays_enabled
        if integrity_monitoring_setting_event_rank_severity_high is not None:
            self.integrity_monitoring_setting_event_rank_severity_high = integrity_monitoring_setting_event_rank_severity_high
        if platform_setting_primary_tenant_share_managed_detect_responses_enabled is not None:
            self.platform_setting_primary_tenant_share_managed_detect_responses_enabled = platform_setting_primary_tenant_share_managed_detect_responses_enabled
        if platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled = platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled
        if intrusion_prevention_setting_retain_event_duration is not None:
            self.intrusion_prevention_setting_retain_event_duration = intrusion_prevention_setting_retain_event_duration
        if platform_setting_syslog_config_id is not None:
            self.platform_setting_syslog_config_id = platform_setting_syslog_config_id
        if platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled = platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled
        if platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled is not None:
            self.platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled = platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled
        if platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled = platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled
        if firewall_setting_internet_connectivity_test_url is not None:
            self.firewall_setting_internet_connectivity_test_url = firewall_setting_internet_connectivity_test_url
        if log_inspection_setting_event_rank_severity_medium is not None:
            self.log_inspection_setting_event_rank_severity_medium = log_inspection_setting_event_rank_severity_medium
        if web_reputation_setting_retain_event_duration is not None:
            self.web_reputation_setting_retain_event_duration = web_reputation_setting_retain_event_duration
        if anti_malware_setting_retain_event_duration is not None:
            self.anti_malware_setting_retain_event_duration = anti_malware_setting_retain_event_duration
        if platform_setting_retain_server_log_duration is not None:
            self.platform_setting_retain_server_log_duration = platform_setting_retain_server_log_duration
        if platform_setting_ddan_auto_submission_enabled is not None:
            self.platform_setting_ddan_auto_submission_enabled = platform_setting_ddan_auto_submission_enabled
        if integrity_monitoring_setting_event_rank_severity_medium is not None:
            self.integrity_monitoring_setting_event_rank_severity_medium = integrity_monitoring_setting_event_rank_severity_medium
        if platform_setting_ddan_manual_source_api_key is not None:
            self.platform_setting_ddan_manual_source_api_key = platform_setting_ddan_manual_source_api_key
        if platform_setting_primary_tenant_allow_tenant_configure_siem_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_configure_siem_enabled = platform_setting_primary_tenant_allow_tenant_configure_siem_enabled
        if firewall_setting_event_rank_severity_log_only is not None:
            self.firewall_setting_event_rank_severity_log_only = firewall_setting_event_rank_severity_log_only
        if platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled is not None:
            self.platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled
        if application_control_setting_retain_event_duration is not None:
            self.application_control_setting_retain_event_duration = application_control_setting_retain_event_duration
        if intrusion_prevention_setting_event_rank_severity_filter_error is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_error = intrusion_prevention_setting_event_rank_severity_filter_error
        if firewall_setting_retain_event_duration is not None:
            self.firewall_setting_retain_event_duration = firewall_setting_retain_event_duration
        if web_reputation_setting_event_rank_risk_untested is not None:
            self.web_reputation_setting_event_rank_risk_untested = web_reputation_setting_event_rank_risk_untested
        if intrusion_prevention_setting_event_rank_severity_filter_high is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_high = intrusion_prevention_setting_event_rank_severity_filter_high
        if platform_setting_ddan_submission_enabled is not None:
            self.platform_setting_ddan_submission_enabled = platform_setting_ddan_submission_enabled
        if firewall_setting_event_rank_severity_deny is not None:
            self.firewall_setting_event_rank_severity_deny = firewall_setting_event_rank_severity_deny
        if web_reputation_setting_event_rank_risk_suspicious is not None:
            self.web_reputation_setting_event_rank_risk_suspicious = web_reputation_setting_event_rank_risk_suspicious
        if intrusion_prevention_setting_event_rank_severity_filter_low is not None:
            self.intrusion_prevention_setting_event_rank_severity_filter_low = intrusion_prevention_setting_event_rank_severity_filter_low
        if platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled is not None:
            self.platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled = platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled
        if integrity_monitoring_setting_event_rank_severity_low is not None:
            self.integrity_monitoring_setting_event_rank_severity_low = integrity_monitoring_setting_event_rank_severity_low
        if integrity_monitoring_setting_event_rank_severity_critical is not None:
            self.integrity_monitoring_setting_event_rank_severity_critical = integrity_monitoring_setting_event_rank_severity_critical

    @property
    def web_reputation_setting_event_rank_risk_highly_suspicious(self):
        """Gets the web_reputation_setting_event_rank_risk_highly_suspicious of this SystemSettings.  # noqa: E501

        Highly Suspicious  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_highly_suspicious of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_highly_suspicious

    @web_reputation_setting_event_rank_risk_highly_suspicious.setter
    def web_reputation_setting_event_rank_risk_highly_suspicious(self, web_reputation_setting_event_rank_risk_highly_suspicious):
        """Sets the web_reputation_setting_event_rank_risk_highly_suspicious of this SystemSettings.

        Highly Suspicious  # noqa: E501

        :param web_reputation_setting_event_rank_risk_highly_suspicious: The web_reputation_setting_event_rank_risk_highly_suspicious of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_highly_suspicious = web_reputation_setting_event_rank_risk_highly_suspicious

    @property
    def firewall_setting_global_stateful_config_id(self):
        """Gets the firewall_setting_global_stateful_config_id of this SystemSettings.  # noqa: E501

        Global Firewall Stateful Configuration  # noqa: E501

        :return: The firewall_setting_global_stateful_config_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_global_stateful_config_id

    @firewall_setting_global_stateful_config_id.setter
    def firewall_setting_global_stateful_config_id(self, firewall_setting_global_stateful_config_id):
        """Sets the firewall_setting_global_stateful_config_id of this SystemSettings.

        Global Firewall Stateful Configuration  # noqa: E501

        :param firewall_setting_global_stateful_config_id: The firewall_setting_global_stateful_config_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_global_stateful_config_id = firewall_setting_global_stateful_config_id

    @property
    def platform_setting_ddan_manual_source_server_url(self):
        """Gets the platform_setting_ddan_manual_source_server_url of this SystemSettings.  # noqa: E501

        Server URL (ex: \"https://[server]/\")  # noqa: E501

        :return: The platform_setting_ddan_manual_source_server_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_manual_source_server_url

    @platform_setting_ddan_manual_source_server_url.setter
    def platform_setting_ddan_manual_source_server_url(self, platform_setting_ddan_manual_source_server_url):
        """Sets the platform_setting_ddan_manual_source_server_url of this SystemSettings.

        Server URL (ex: \"https://[server]/\")  # noqa: E501

        :param platform_setting_ddan_manual_source_server_url: The platform_setting_ddan_manual_source_server_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_manual_source_server_url = platform_setting_ddan_manual_source_server_url

    @property
    def firewall_setting_internet_connectivity_test_expected_content_regex(self):
        """Gets the firewall_setting_internet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501

        Regular Expression for returned content used to confirm Connectivity  # noqa: E501

        :return: The firewall_setting_internet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_internet_connectivity_test_expected_content_regex

    @firewall_setting_internet_connectivity_test_expected_content_regex.setter
    def firewall_setting_internet_connectivity_test_expected_content_regex(self, firewall_setting_internet_connectivity_test_expected_content_regex):
        """Sets the firewall_setting_internet_connectivity_test_expected_content_regex of this SystemSettings.

        Regular Expression for returned content used to confirm Connectivity  # noqa: E501

        :param firewall_setting_internet_connectivity_test_expected_content_regex: The firewall_setting_internet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_internet_connectivity_test_expected_content_regex = firewall_setting_internet_connectivity_test_expected_content_regex

    @property
    def platform_setting_primary_tenant_share_connected_threat_defenses_enabled(self):
        """Gets the platform_setting_primary_tenant_share_connected_threat_defenses_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to use the Primary Tenant's Trend Micro Control Manager and Deep Discovery Analyzer Server settings.  # noqa: E501

        :return: The platform_setting_primary_tenant_share_connected_threat_defenses_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_share_connected_threat_defenses_enabled

    @platform_setting_primary_tenant_share_connected_threat_defenses_enabled.setter
    def platform_setting_primary_tenant_share_connected_threat_defenses_enabled(self, platform_setting_primary_tenant_share_connected_threat_defenses_enabled):
        """Sets the platform_setting_primary_tenant_share_connected_threat_defenses_enabled of this SystemSettings.

        Allow Tenants to use the Primary Tenant's Trend Micro Control Manager and Deep Discovery Analyzer Server settings.  # noqa: E501

        :param platform_setting_primary_tenant_share_connected_threat_defenses_enabled: The platform_setting_primary_tenant_share_connected_threat_defenses_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_share_connected_threat_defenses_enabled = platform_setting_primary_tenant_share_connected_threat_defenses_enabled

    @property
    def web_reputation_setting_event_rank_risk_dangerous(self):
        """Gets the web_reputation_setting_event_rank_risk_dangerous of this SystemSettings.  # noqa: E501

        Dangerous  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_dangerous of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_dangerous

    @web_reputation_setting_event_rank_risk_dangerous.setter
    def web_reputation_setting_event_rank_risk_dangerous(self, web_reputation_setting_event_rank_risk_dangerous):
        """Sets the web_reputation_setting_event_rank_risk_dangerous of this SystemSettings.

        Dangerous  # noqa: E501

        :param web_reputation_setting_event_rank_risk_dangerous: The web_reputation_setting_event_rank_risk_dangerous of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_dangerous = web_reputation_setting_event_rank_risk_dangerous

    @property
    def platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to run \"Port Scan\" (directly and as a Scheduled Task)  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled

    @platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled(self, platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled of this SystemSettings.

        Allow Tenants to run \"Port Scan\" (directly and as a Scheduled Task)  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled: The platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled = platform_setting_primary_tenant_allow_tenant_run_port_scan_enabled

    @property
    def platform_setting_retain_system_event_duration(self):
        """Gets the platform_setting_retain_system_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete System Events older than  # noqa: E501

        :return: The platform_setting_retain_system_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_retain_system_event_duration

    @platform_setting_retain_system_event_duration.setter
    def platform_setting_retain_system_event_duration(self, platform_setting_retain_system_event_duration):
        """Sets the platform_setting_retain_system_event_duration of this SystemSettings.

        Automatically delete System Events older than  # noqa: E501

        :param platform_setting_retain_system_event_duration: The platform_setting_retain_system_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_retain_system_event_duration = platform_setting_retain_system_event_duration

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_medium(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_medium of this SystemSettings.  # noqa: E501

        Medium  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_medium of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_medium

    @intrusion_prevention_setting_event_rank_severity_filter_medium.setter
    def intrusion_prevention_setting_event_rank_severity_filter_medium(self, intrusion_prevention_setting_event_rank_severity_filter_medium):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_medium of this SystemSettings.

        Medium  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_medium: The intrusion_prevention_setting_event_rank_severity_filter_medium of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_medium = intrusion_prevention_setting_event_rank_severity_filter_medium

    @property
    def firewall_setting_intranet_connectivity_test_expected_content_regex(self):
        """Gets the firewall_setting_intranet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501

        Regular Expression for returned content used to confirm Intranet Connectivity  # noqa: E501

        :return: The firewall_setting_intranet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_intranet_connectivity_test_expected_content_regex

    @firewall_setting_intranet_connectivity_test_expected_content_regex.setter
    def firewall_setting_intranet_connectivity_test_expected_content_regex(self, firewall_setting_intranet_connectivity_test_expected_content_regex):
        """Sets the firewall_setting_intranet_connectivity_test_expected_content_regex of this SystemSettings.

        Regular Expression for returned content used to confirm Intranet Connectivity  # noqa: E501

        :param firewall_setting_intranet_connectivity_test_expected_content_regex: The firewall_setting_intranet_connectivity_test_expected_content_regex of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_intranet_connectivity_test_expected_content_regex = firewall_setting_intranet_connectivity_test_expected_content_regex

    @property
    def log_inspection_setting_retain_event_duration(self):
        """Gets the log_inspection_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Log Inspection Events older than  # noqa: E501

        :return: The log_inspection_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_retain_event_duration

    @log_inspection_setting_retain_event_duration.setter
    def log_inspection_setting_retain_event_duration(self, log_inspection_setting_retain_event_duration):
        """Sets the log_inspection_setting_retain_event_duration of this SystemSettings.

        Automatically delete Log Inspection Events older than  # noqa: E501

        :param log_inspection_setting_retain_event_duration: The log_inspection_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_retain_event_duration = log_inspection_setting_retain_event_duration

    @property
    def platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled(self):
        """Gets the platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501

        Automatically revoke Primary Tenant access after  # noqa: E501

        :return: The platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled

    @platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled.setter
    def platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled(self, platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled):
        """Sets the platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled of this SystemSettings.

        Automatically revoke Primary Tenant access after  # noqa: E501

        :param platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled: The platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled = platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_enabled

    @property
    def platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout(self):
        """Gets the platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout of this SystemSettings.  # noqa: E501

        Automatically revoke Primary Tenant access after  # noqa: E501

        :return: The platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout

    @platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout.setter
    def platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout(self, platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout):
        """Sets the platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout of this SystemSettings.

        Automatically revoke Primary Tenant access after  # noqa: E501

        :param platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout: The platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout = platform_setting_tenant_auto_revoke_impersonation_by_primary_tenant_timeout

    @property
    def integrity_monitoring_setting_retain_event_duration(self):
        """Gets the integrity_monitoring_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Integrity Monitoring Events older than  # noqa: E501

        :return: The integrity_monitoring_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_retain_event_duration

    @integrity_monitoring_setting_retain_event_duration.setter
    def integrity_monitoring_setting_retain_event_duration(self, integrity_monitoring_setting_retain_event_duration):
        """Sets the integrity_monitoring_setting_retain_event_duration of this SystemSettings.

        Automatically delete Integrity Monitoring Events older than  # noqa: E501

        :param integrity_monitoring_setting_retain_event_duration: The integrity_monitoring_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_retain_event_duration = integrity_monitoring_setting_retain_event_duration

    @property
    def platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to use the \"Run Script\" Scheduled Task  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled

    @platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled(self, platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled of this SystemSettings.

        Allow Tenants to use the \"Run Script\" Scheduled Task  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled: The platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled = platform_setting_primary_tenant_allow_tenant_use_scheduled_run_script_task_enabled

    @property
    def web_reputation_setting_event_rank_risk_blocked_by_administrator_rank(self):
        """Gets the web_reputation_setting_event_rank_risk_blocked_by_administrator_rank of this SystemSettings.  # noqa: E501

        Blocked By Administrator  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_blocked_by_administrator_rank of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_blocked_by_administrator_rank

    @web_reputation_setting_event_rank_risk_blocked_by_administrator_rank.setter
    def web_reputation_setting_event_rank_risk_blocked_by_administrator_rank(self, web_reputation_setting_event_rank_risk_blocked_by_administrator_rank):
        """Sets the web_reputation_setting_event_rank_risk_blocked_by_administrator_rank of this SystemSettings.

        Blocked By Administrator  # noqa: E501

        :param web_reputation_setting_event_rank_risk_blocked_by_administrator_rank: The web_reputation_setting_event_rank_risk_blocked_by_administrator_rank of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_blocked_by_administrator_rank = web_reputation_setting_event_rank_risk_blocked_by_administrator_rank

    @property
    def anti_malware_setting_event_email_body_template(self):
        """Gets the anti_malware_setting_event_email_body_template of this SystemSettings.  # noqa: E501

        Email Template  # noqa: E501

        :return: The anti_malware_setting_event_email_body_template of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_event_email_body_template

    @anti_malware_setting_event_email_body_template.setter
    def anti_malware_setting_event_email_body_template(self, anti_malware_setting_event_email_body_template):
        """Sets the anti_malware_setting_event_email_body_template of this SystemSettings.

        Email Template  # noqa: E501

        :param anti_malware_setting_event_email_body_template: The anti_malware_setting_event_email_body_template of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_event_email_body_template = anti_malware_setting_event_email_body_template

    @property
    def log_inspection_setting_event_rank_severity_critical(self):
        """Gets the log_inspection_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501

        Critical  # noqa: E501

        :return: The log_inspection_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_event_rank_severity_critical

    @log_inspection_setting_event_rank_severity_critical.setter
    def log_inspection_setting_event_rank_severity_critical(self, log_inspection_setting_event_rank_severity_critical):
        """Sets the log_inspection_setting_event_rank_severity_critical of this SystemSettings.

        Critical  # noqa: E501

        :param log_inspection_setting_event_rank_severity_critical: The log_inspection_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_event_rank_severity_critical = log_inspection_setting_event_rank_severity_critical

    @property
    def platform_setting_ddan_use_proxy_enabled(self):
        """Gets the platform_setting_ddan_use_proxy_enabled of this SystemSettings.  # noqa: E501

        When accessing Deep Discovery Analyzer, use proxy:  # noqa: E501

        :return: The platform_setting_ddan_use_proxy_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_use_proxy_enabled

    @platform_setting_ddan_use_proxy_enabled.setter
    def platform_setting_ddan_use_proxy_enabled(self, platform_setting_ddan_use_proxy_enabled):
        """Sets the platform_setting_ddan_use_proxy_enabled of this SystemSettings.

        When accessing Deep Discovery Analyzer, use proxy:  # noqa: E501

        :param platform_setting_ddan_use_proxy_enabled: The platform_setting_ddan_use_proxy_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_use_proxy_enabled = platform_setting_ddan_use_proxy_enabled

    @property
    def platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled(self):
        """Gets the platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled of this SystemSettings.  # noqa: E501

        All options on the \"SMTP\" Tab  # noqa: E501

        :return: The platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled

    @platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled.setter
    def platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled(self, platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled):
        """Sets the platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled of this SystemSettings.

        All options on the \"SMTP\" Tab  # noqa: E501

        :param platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled: The platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_smtp_tab_enabled

    @property
    def anti_malware_setting_event_email_enabled(self):
        """Gets the anti_malware_setting_event_email_enabled of this SystemSettings.  # noqa: E501

        Anti-Malware Email Notifications Enabled  # noqa: E501

        :return: The anti_malware_setting_event_email_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_event_email_enabled

    @anti_malware_setting_event_email_enabled.setter
    def anti_malware_setting_event_email_enabled(self, anti_malware_setting_event_email_enabled):
        """Sets the anti_malware_setting_event_email_enabled of this SystemSettings.

        Anti-Malware Email Notifications Enabled  # noqa: E501

        :param anti_malware_setting_event_email_enabled: The anti_malware_setting_event_email_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_event_email_enabled = anti_malware_setting_event_email_enabled

    @property
    def platform_setting_ddan_proxy_id(self):
        """Gets the platform_setting_ddan_proxy_id of this SystemSettings.  # noqa: E501

        Use Proxy when accessing Deep Discovery Analyzer  # noqa: E501

        :return: The platform_setting_ddan_proxy_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_proxy_id

    @platform_setting_ddan_proxy_id.setter
    def platform_setting_ddan_proxy_id(self, platform_setting_ddan_proxy_id):
        """Sets the platform_setting_ddan_proxy_id of this SystemSettings.

        Use Proxy when accessing Deep Discovery Analyzer  # noqa: E501

        :param platform_setting_ddan_proxy_id: The platform_setting_ddan_proxy_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_proxy_id = platform_setting_ddan_proxy_id

    @property
    def platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled(self):
        """Gets the platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled of this SystemSettings.  # noqa: E501

        All options on the \"Storage\" Tab  # noqa: E501

        :return: The platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled

    @platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled.setter
    def platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled(self, platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled):
        """Sets the platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled of this SystemSettings.

        All options on the \"Storage\" Tab  # noqa: E501

        :param platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled: The platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_storage_tab_enabled

    @property
    def anti_malware_setting_event_email_recipients(self):
        """Gets the anti_malware_setting_event_email_recipients of this SystemSettings.  # noqa: E501

        Email Recipients  # noqa: E501

        :return: The anti_malware_setting_event_email_recipients of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_event_email_recipients

    @anti_malware_setting_event_email_recipients.setter
    def anti_malware_setting_event_email_recipients(self, anti_malware_setting_event_email_recipients):
        """Sets the anti_malware_setting_event_email_recipients of this SystemSettings.

        Email Recipients  # noqa: E501

        :param anti_malware_setting_event_email_recipients: The anti_malware_setting_event_email_recipients of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_event_email_recipients = anti_malware_setting_event_email_recipients

    @property
    def platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to use the Relays in my \"Default Relay Group\"  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled

    @platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled(self, platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled of this SystemSettings.

        Allow Tenants to use the Relays in my \"Default Relay Group\"  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled: The platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled = platform_setting_primary_tenant_allow_tenant_use_default_relay_group_enabled

    @property
    def firewall_setting_intranet_connectivity_test_url(self):
        """Gets the firewall_setting_intranet_connectivity_test_url of this SystemSettings.  # noqa: E501

        URL for testing Intranet Connectivity Status  # noqa: E501

        :return: The firewall_setting_intranet_connectivity_test_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_intranet_connectivity_test_url

    @firewall_setting_intranet_connectivity_test_url.setter
    def firewall_setting_intranet_connectivity_test_url(self, firewall_setting_intranet_connectivity_test_url):
        """Sets the firewall_setting_intranet_connectivity_test_url of this SystemSettings.

        URL for testing Intranet Connectivity Status  # noqa: E501

        :param firewall_setting_intranet_connectivity_test_url: The firewall_setting_intranet_connectivity_test_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_intranet_connectivity_test_url = firewall_setting_intranet_connectivity_test_url

    @property
    def platform_setting_primary_tenant_allow_tenant_configure_sns_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_configure_sns_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to configure SNS settings  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_configure_sns_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_configure_sns_enabled

    @platform_setting_primary_tenant_allow_tenant_configure_sns_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_configure_sns_enabled(self, platform_setting_primary_tenant_allow_tenant_configure_sns_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_configure_sns_enabled of this SystemSettings.

        Allow Tenants to configure SNS settings  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_configure_sns_enabled: The platform_setting_primary_tenant_allow_tenant_configure_sns_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_configure_sns_enabled = platform_setting_primary_tenant_allow_tenant_configure_sns_enabled

    @property
    def firewall_setting_event_rank_severity_packet_rejection(self):
        """Gets the firewall_setting_event_rank_severity_packet_rejection of this SystemSettings.  # noqa: E501

        Packet Rejection  # noqa: E501

        :return: The firewall_setting_event_rank_severity_packet_rejection of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_event_rank_severity_packet_rejection

    @firewall_setting_event_rank_severity_packet_rejection.setter
    def firewall_setting_event_rank_severity_packet_rejection(self, firewall_setting_event_rank_severity_packet_rejection):
        """Sets the firewall_setting_event_rank_severity_packet_rejection of this SystemSettings.

        Packet Rejection  # noqa: E501

        :param firewall_setting_event_rank_severity_packet_rejection: The firewall_setting_event_rank_severity_packet_rejection of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_event_rank_severity_packet_rejection = firewall_setting_event_rank_severity_packet_rejection

    @property
    def platform_setting_active_sessions_max_exceeded_action(self):
        """Gets the platform_setting_active_sessions_max_exceeded_action of this SystemSettings.  # noqa: E501

        Action when concurrent session limit is exceeded  # noqa: E501

        :return: The platform_setting_active_sessions_max_exceeded_action of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_active_sessions_max_exceeded_action

    @platform_setting_active_sessions_max_exceeded_action.setter
    def platform_setting_active_sessions_max_exceeded_action(self, platform_setting_active_sessions_max_exceeded_action):
        """Sets the platform_setting_active_sessions_max_exceeded_action of this SystemSettings.

        Action when concurrent session limit is exceeded  # noqa: E501

        :param platform_setting_active_sessions_max_exceeded_action: The platform_setting_active_sessions_max_exceeded_action of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_active_sessions_max_exceeded_action = platform_setting_active_sessions_max_exceeded_action

    @property
    def log_inspection_setting_event_rank_severity_high(self):
        """Gets the log_inspection_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501

        High  # noqa: E501

        :return: The log_inspection_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_event_rank_severity_high

    @log_inspection_setting_event_rank_severity_high.setter
    def log_inspection_setting_event_rank_severity_high(self, log_inspection_setting_event_rank_severity_high):
        """Sets the log_inspection_setting_event_rank_severity_high of this SystemSettings.

        High  # noqa: E501

        :param log_inspection_setting_event_rank_severity_high: The log_inspection_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_event_rank_severity_high = log_inspection_setting_event_rank_severity_high

    @property
    def platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled(self):
        """Gets the platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled of this SystemSettings.  # noqa: E501

        Use the Primary Tenant Relay Group as my Default Relay Group  # noqa: E501

        :return: The platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled

    @platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled.setter
    def platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled(self, platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled):
        """Sets the platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled of this SystemSettings.

        Use the Primary Tenant Relay Group as my Default Relay Group  # noqa: E501

        :param platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled: The platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled = platform_setting_tenant_use_default_relay_group_from_primary_tenant_enabled

    @property
    def platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to add with Cloud Accounts  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled

    @platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled(self, platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled of this SystemSettings.

        Allow Tenants to add with Cloud Accounts  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled: The platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled = platform_setting_primary_tenant_allow_tenant_sync_with_cloud_account_enabled

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_critical(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_critical of this SystemSettings.  # noqa: E501

        Critical  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_critical of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_critical

    @intrusion_prevention_setting_event_rank_severity_filter_critical.setter
    def intrusion_prevention_setting_event_rank_severity_filter_critical(self, intrusion_prevention_setting_event_rank_severity_filter_critical):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_critical of this SystemSettings.

        Critical  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_critical: The intrusion_prevention_setting_event_rank_severity_filter_critical of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_critical = intrusion_prevention_setting_event_rank_severity_filter_critical

    @property
    def platform_setting_active_sessions_max(self):
        """Gets the platform_setting_active_sessions_max of this SystemSettings.  # noqa: E501

        Number of concurrent sessions allowed per User  # noqa: E501

        :return: The platform_setting_active_sessions_max of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_active_sessions_max

    @platform_setting_active_sessions_max.setter
    def platform_setting_active_sessions_max(self, platform_setting_active_sessions_max):
        """Sets the platform_setting_active_sessions_max of this SystemSettings.

        Number of concurrent sessions allowed per User  # noqa: E501

        :param platform_setting_active_sessions_max: The platform_setting_active_sessions_max of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_active_sessions_max = platform_setting_active_sessions_max

    @property
    def log_inspection_setting_event_rank_severity_low(self):
        """Gets the log_inspection_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501

        Low  # noqa: E501

        :return: The log_inspection_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_event_rank_severity_low

    @log_inspection_setting_event_rank_severity_low.setter
    def log_inspection_setting_event_rank_severity_low(self, log_inspection_setting_event_rank_severity_low):
        """Sets the log_inspection_setting_event_rank_severity_low of this SystemSettings.

        Low  # noqa: E501

        :param log_inspection_setting_event_rank_severity_low: The log_inspection_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_event_rank_severity_low = log_inspection_setting_event_rank_severity_low

    @property
    def platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to add VMware vCenters  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled

    @platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled(self, platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled of this SystemSettings.

        Allow Tenants to add VMware vCenters  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled: The platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled = platform_setting_primary_tenant_allow_tenant_add_vmware_vcenter_enabled

    @property
    def firewall_setting_internet_connectivity_test_interval(self):
        """Gets the firewall_setting_internet_connectivity_test_interval of this SystemSettings.  # noqa: E501

        Test Interval  # noqa: E501

        :return: The firewall_setting_internet_connectivity_test_interval of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_internet_connectivity_test_interval

    @firewall_setting_internet_connectivity_test_interval.setter
    def firewall_setting_internet_connectivity_test_interval(self, firewall_setting_internet_connectivity_test_interval):
        """Sets the firewall_setting_internet_connectivity_test_interval of this SystemSettings.

        Test Interval  # noqa: E501

        :param firewall_setting_internet_connectivity_test_interval: The firewall_setting_internet_connectivity_test_interval of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_internet_connectivity_test_interval = firewall_setting_internet_connectivity_test_interval

    @property
    def platform_setting_ddan_source_option(self):
        """Gets the platform_setting_ddan_source_option of this SystemSettings.  # noqa: E501

        Deep Discovery Analyzer Source  # noqa: E501

        :return: The platform_setting_ddan_source_option of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_source_option

    @platform_setting_ddan_source_option.setter
    def platform_setting_ddan_source_option(self, platform_setting_ddan_source_option):
        """Sets the platform_setting_ddan_source_option of this SystemSettings.

        Deep Discovery Analyzer Source  # noqa: E501

        :param platform_setting_ddan_source_option: The platform_setting_ddan_source_option of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_source_option = platform_setting_ddan_source_option

    @property
    def anti_malware_setting_event_email_subject(self):
        """Gets the anti_malware_setting_event_email_subject of this SystemSettings.  # noqa: E501

        Email Subject Text  # noqa: E501

        :return: The anti_malware_setting_event_email_subject of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_event_email_subject

    @anti_malware_setting_event_email_subject.setter
    def anti_malware_setting_event_email_subject(self, anti_malware_setting_event_email_subject):
        """Sets the anti_malware_setting_event_email_subject of this SystemSettings.

        Email Subject Text  # noqa: E501

        :param anti_malware_setting_event_email_subject: The anti_malware_setting_event_email_subject of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_event_email_subject = anti_malware_setting_event_email_subject

    @property
    def application_control_setting_serve_rulesets_from_relays_enabled(self):
        """Gets the application_control_setting_serve_rulesets_from_relays_enabled of this SystemSettings.  # noqa: E501

        Serve application control rulesets from relays  # noqa: E501

        :return: The application_control_setting_serve_rulesets_from_relays_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._application_control_setting_serve_rulesets_from_relays_enabled

    @application_control_setting_serve_rulesets_from_relays_enabled.setter
    def application_control_setting_serve_rulesets_from_relays_enabled(self, application_control_setting_serve_rulesets_from_relays_enabled):
        """Sets the application_control_setting_serve_rulesets_from_relays_enabled of this SystemSettings.

        Serve application control rulesets from relays  # noqa: E501

        :param application_control_setting_serve_rulesets_from_relays_enabled: The application_control_setting_serve_rulesets_from_relays_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._application_control_setting_serve_rulesets_from_relays_enabled = application_control_setting_serve_rulesets_from_relays_enabled

    @property
    def integrity_monitoring_setting_event_rank_severity_high(self):
        """Gets the integrity_monitoring_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501

        High  # noqa: E501

        :return: The integrity_monitoring_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_event_rank_severity_high

    @integrity_monitoring_setting_event_rank_severity_high.setter
    def integrity_monitoring_setting_event_rank_severity_high(self, integrity_monitoring_setting_event_rank_severity_high):
        """Sets the integrity_monitoring_setting_event_rank_severity_high of this SystemSettings.

        High  # noqa: E501

        :param integrity_monitoring_setting_event_rank_severity_high: The integrity_monitoring_setting_event_rank_severity_high of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_event_rank_severity_high = integrity_monitoring_setting_event_rank_severity_high

    @property
    def platform_setting_primary_tenant_share_managed_detect_responses_enabled(self):
        """Gets the platform_setting_primary_tenant_share_managed_detect_responses_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to use Primary Tenant's Managed Detection and Response settings.  # noqa: E501

        :return: The platform_setting_primary_tenant_share_managed_detect_responses_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_share_managed_detect_responses_enabled

    @platform_setting_primary_tenant_share_managed_detect_responses_enabled.setter
    def platform_setting_primary_tenant_share_managed_detect_responses_enabled(self, platform_setting_primary_tenant_share_managed_detect_responses_enabled):
        """Sets the platform_setting_primary_tenant_share_managed_detect_responses_enabled of this SystemSettings.

        Allow Tenants to use Primary Tenant's Managed Detection and Response settings.  # noqa: E501

        :param platform_setting_primary_tenant_share_managed_detect_responses_enabled: The platform_setting_primary_tenant_share_managed_detect_responses_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_share_managed_detect_responses_enabled = platform_setting_primary_tenant_share_managed_detect_responses_enabled

    @property
    def platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to run \"Computer Discovery\" (directly and as a Scheduled Task)  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled

    @platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled(self, platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled of this SystemSettings.

        Allow Tenants to run \"Computer Discovery\" (directly and as a Scheduled Task)  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled: The platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled = platform_setting_primary_tenant_allow_tenant_run_computer_discovery_enabled

    @property
    def intrusion_prevention_setting_retain_event_duration(self):
        """Gets the intrusion_prevention_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Intrusion Prevention Events older than  # noqa: E501

        :return: The intrusion_prevention_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_retain_event_duration

    @intrusion_prevention_setting_retain_event_duration.setter
    def intrusion_prevention_setting_retain_event_duration(self, intrusion_prevention_setting_retain_event_duration):
        """Sets the intrusion_prevention_setting_retain_event_duration of this SystemSettings.

        Automatically delete Intrusion Prevention Events older than  # noqa: E501

        :param intrusion_prevention_setting_retain_event_duration: The intrusion_prevention_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_retain_event_duration = intrusion_prevention_setting_retain_event_duration

    @property
    def platform_setting_syslog_config_id(self):
        """Gets the platform_setting_syslog_config_id of this SystemSettings.  # noqa: E501

        Forward System Events to a remote computer (via Syslog) using configuration  # noqa: E501

        :return: The platform_setting_syslog_config_id of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_syslog_config_id

    @platform_setting_syslog_config_id.setter
    def platform_setting_syslog_config_id(self, platform_setting_syslog_config_id):
        """Sets the platform_setting_syslog_config_id of this SystemSettings.

        Forward System Events to a remote computer (via Syslog) using configuration  # noqa: E501

        :param platform_setting_syslog_config_id: The platform_setting_syslog_config_id of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_syslog_config_id = platform_setting_syslog_config_id

    @property
    def platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to synchronize with LDAP Directories  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled

    @platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled(self, platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled of this SystemSettings.

        Allow Tenants to synchronize with LDAP Directories  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled: The platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled = platform_setting_primary_tenant_allow_tenant_synchronize_ldap_directories_enabled

    @property
    def platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled(self):
        """Gets the platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501

        Allow Primary Tenant access to my Deep Security Environment  # noqa: E501

        :return: The platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled

    @platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled.setter
    def platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled(self, platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled):
        """Sets the platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled of this SystemSettings.

        Allow Primary Tenant access to my Deep Security Environment  # noqa: E501

        :param platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled: The platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled = platform_setting_tenant_allow_impersonation_by_primary_tenant_enabled

    @property
    def platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to configure SNMP settings  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled

    @platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled(self, platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled of this SystemSettings.

        Allow Tenants to configure SNMP settings  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled: The platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled = platform_setting_primary_tenant_allow_tenant_configure_snmp_enabled

    @property
    def firewall_setting_internet_connectivity_test_url(self):
        """Gets the firewall_setting_internet_connectivity_test_url of this SystemSettings.  # noqa: E501

        URL for testing Internet Connectivity Status  # noqa: E501

        :return: The firewall_setting_internet_connectivity_test_url of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_internet_connectivity_test_url

    @firewall_setting_internet_connectivity_test_url.setter
    def firewall_setting_internet_connectivity_test_url(self, firewall_setting_internet_connectivity_test_url):
        """Sets the firewall_setting_internet_connectivity_test_url of this SystemSettings.

        URL for testing Internet Connectivity Status  # noqa: E501

        :param firewall_setting_internet_connectivity_test_url: The firewall_setting_internet_connectivity_test_url of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_internet_connectivity_test_url = firewall_setting_internet_connectivity_test_url

    @property
    def log_inspection_setting_event_rank_severity_medium(self):
        """Gets the log_inspection_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501

        Medium  # noqa: E501

        :return: The log_inspection_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._log_inspection_setting_event_rank_severity_medium

    @log_inspection_setting_event_rank_severity_medium.setter
    def log_inspection_setting_event_rank_severity_medium(self, log_inspection_setting_event_rank_severity_medium):
        """Sets the log_inspection_setting_event_rank_severity_medium of this SystemSettings.

        Medium  # noqa: E501

        :param log_inspection_setting_event_rank_severity_medium: The log_inspection_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._log_inspection_setting_event_rank_severity_medium = log_inspection_setting_event_rank_severity_medium

    @property
    def web_reputation_setting_retain_event_duration(self):
        """Gets the web_reputation_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Web Reputation Events older than  # noqa: E501

        :return: The web_reputation_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_retain_event_duration

    @web_reputation_setting_retain_event_duration.setter
    def web_reputation_setting_retain_event_duration(self, web_reputation_setting_retain_event_duration):
        """Sets the web_reputation_setting_retain_event_duration of this SystemSettings.

        Automatically delete Web Reputation Events older than  # noqa: E501

        :param web_reputation_setting_retain_event_duration: The web_reputation_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_retain_event_duration = web_reputation_setting_retain_event_duration

    @property
    def anti_malware_setting_retain_event_duration(self):
        """Gets the anti_malware_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Anti-Malware Events older than  # noqa: E501

        :return: The anti_malware_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._anti_malware_setting_retain_event_duration

    @anti_malware_setting_retain_event_duration.setter
    def anti_malware_setting_retain_event_duration(self, anti_malware_setting_retain_event_duration):
        """Sets the anti_malware_setting_retain_event_duration of this SystemSettings.

        Automatically delete Anti-Malware Events older than  # noqa: E501

        :param anti_malware_setting_retain_event_duration: The anti_malware_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._anti_malware_setting_retain_event_duration = anti_malware_setting_retain_event_duration

    @property
    def platform_setting_retain_server_log_duration(self):
        """Gets the platform_setting_retain_server_log_duration of this SystemSettings.  # noqa: E501

        Automatically delete Server Logs older than  # noqa: E501

        :return: The platform_setting_retain_server_log_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_retain_server_log_duration

    @platform_setting_retain_server_log_duration.setter
    def platform_setting_retain_server_log_duration(self, platform_setting_retain_server_log_duration):
        """Sets the platform_setting_retain_server_log_duration of this SystemSettings.

        Automatically delete Server Logs older than  # noqa: E501

        :param platform_setting_retain_server_log_duration: The platform_setting_retain_server_log_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_retain_server_log_duration = platform_setting_retain_server_log_duration

    @property
    def platform_setting_ddan_auto_submission_enabled(self):
        """Gets the platform_setting_ddan_auto_submission_enabled of this SystemSettings.  # noqa: E501

        Enable automatic file submission  # noqa: E501

        :return: The platform_setting_ddan_auto_submission_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_auto_submission_enabled

    @platform_setting_ddan_auto_submission_enabled.setter
    def platform_setting_ddan_auto_submission_enabled(self, platform_setting_ddan_auto_submission_enabled):
        """Sets the platform_setting_ddan_auto_submission_enabled of this SystemSettings.

        Enable automatic file submission  # noqa: E501

        :param platform_setting_ddan_auto_submission_enabled: The platform_setting_ddan_auto_submission_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_auto_submission_enabled = platform_setting_ddan_auto_submission_enabled

    @property
    def integrity_monitoring_setting_event_rank_severity_medium(self):
        """Gets the integrity_monitoring_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501

        Medium  # noqa: E501

        :return: The integrity_monitoring_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_event_rank_severity_medium

    @integrity_monitoring_setting_event_rank_severity_medium.setter
    def integrity_monitoring_setting_event_rank_severity_medium(self, integrity_monitoring_setting_event_rank_severity_medium):
        """Sets the integrity_monitoring_setting_event_rank_severity_medium of this SystemSettings.

        Medium  # noqa: E501

        :param integrity_monitoring_setting_event_rank_severity_medium: The integrity_monitoring_setting_event_rank_severity_medium of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_event_rank_severity_medium = integrity_monitoring_setting_event_rank_severity_medium

    @property
    def platform_setting_ddan_manual_source_api_key(self):
        """Gets the platform_setting_ddan_manual_source_api_key of this SystemSettings.  # noqa: E501

        API Key  # noqa: E501

        :return: The platform_setting_ddan_manual_source_api_key of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_manual_source_api_key

    @platform_setting_ddan_manual_source_api_key.setter
    def platform_setting_ddan_manual_source_api_key(self, platform_setting_ddan_manual_source_api_key):
        """Sets the platform_setting_ddan_manual_source_api_key of this SystemSettings.

        API Key  # noqa: E501

        :param platform_setting_ddan_manual_source_api_key: The platform_setting_ddan_manual_source_api_key of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_manual_source_api_key = platform_setting_ddan_manual_source_api_key

    @property
    def platform_setting_primary_tenant_allow_tenant_configure_siem_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_configure_siem_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to configure SIEM settings (If not checked, all Tenants use the settings located on the SIEM tab for ALL event types and syslog is relayed via the Manager)  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_configure_siem_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_configure_siem_enabled

    @platform_setting_primary_tenant_allow_tenant_configure_siem_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_configure_siem_enabled(self, platform_setting_primary_tenant_allow_tenant_configure_siem_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_configure_siem_enabled of this SystemSettings.

        Allow Tenants to configure SIEM settings (If not checked, all Tenants use the settings located on the SIEM tab for ALL event types and syslog is relayed via the Manager)  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_configure_siem_enabled: The platform_setting_primary_tenant_allow_tenant_configure_siem_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_configure_siem_enabled = platform_setting_primary_tenant_allow_tenant_configure_siem_enabled

    @property
    def firewall_setting_event_rank_severity_log_only(self):
        """Gets the firewall_setting_event_rank_severity_log_only of this SystemSettings.  # noqa: E501

        Log Only  # noqa: E501

        :return: The firewall_setting_event_rank_severity_log_only of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_event_rank_severity_log_only

    @firewall_setting_event_rank_severity_log_only.setter
    def firewall_setting_event_rank_severity_log_only(self, firewall_setting_event_rank_severity_log_only):
        """Sets the firewall_setting_event_rank_severity_log_only of this SystemSettings.

        Log Only  # noqa: E501

        :param firewall_setting_event_rank_severity_log_only: The firewall_setting_event_rank_severity_log_only of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_event_rank_severity_log_only = firewall_setting_event_rank_severity_log_only

    @property
    def platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled(self):
        """Gets the platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled of this SystemSettings.  # noqa: E501

        Data Privacy options on the \"Agents\" Tab  # noqa: E501

        :return: The platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled

    @platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled.setter
    def platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled(self, platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled):
        """Sets the platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled of this SystemSettings.

        Data Privacy options on the \"Agents\" Tab  # noqa: E501

        :param platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled: The platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled = platform_setting_primary_tenant_lock_and_hide_tenant_data_privacy_option_enabled

    @property
    def application_control_setting_retain_event_duration(self):
        """Gets the application_control_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Application Control Events older than  # noqa: E501

        :return: The application_control_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._application_control_setting_retain_event_duration

    @application_control_setting_retain_event_duration.setter
    def application_control_setting_retain_event_duration(self, application_control_setting_retain_event_duration):
        """Sets the application_control_setting_retain_event_duration of this SystemSettings.

        Automatically delete Application Control Events older than  # noqa: E501

        :param application_control_setting_retain_event_duration: The application_control_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._application_control_setting_retain_event_duration = application_control_setting_retain_event_duration

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_error(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_error of this SystemSettings.  # noqa: E501

        Error  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_error of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_error

    @intrusion_prevention_setting_event_rank_severity_filter_error.setter
    def intrusion_prevention_setting_event_rank_severity_filter_error(self, intrusion_prevention_setting_event_rank_severity_filter_error):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_error of this SystemSettings.

        Error  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_error: The intrusion_prevention_setting_event_rank_severity_filter_error of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_error = intrusion_prevention_setting_event_rank_severity_filter_error

    @property
    def firewall_setting_retain_event_duration(self):
        """Gets the firewall_setting_retain_event_duration of this SystemSettings.  # noqa: E501

        Automatically delete Firewall Events older than  # noqa: E501

        :return: The firewall_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_retain_event_duration

    @firewall_setting_retain_event_duration.setter
    def firewall_setting_retain_event_duration(self, firewall_setting_retain_event_duration):
        """Sets the firewall_setting_retain_event_duration of this SystemSettings.

        Automatically delete Firewall Events older than  # noqa: E501

        :param firewall_setting_retain_event_duration: The firewall_setting_retain_event_duration of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_retain_event_duration = firewall_setting_retain_event_duration

    @property
    def web_reputation_setting_event_rank_risk_untested(self):
        """Gets the web_reputation_setting_event_rank_risk_untested of this SystemSettings.  # noqa: E501

        Untested  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_untested of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_untested

    @web_reputation_setting_event_rank_risk_untested.setter
    def web_reputation_setting_event_rank_risk_untested(self, web_reputation_setting_event_rank_risk_untested):
        """Sets the web_reputation_setting_event_rank_risk_untested of this SystemSettings.

        Untested  # noqa: E501

        :param web_reputation_setting_event_rank_risk_untested: The web_reputation_setting_event_rank_risk_untested of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_untested = web_reputation_setting_event_rank_risk_untested

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_high(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_high of this SystemSettings.  # noqa: E501

        High  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_high of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_high

    @intrusion_prevention_setting_event_rank_severity_filter_high.setter
    def intrusion_prevention_setting_event_rank_severity_filter_high(self, intrusion_prevention_setting_event_rank_severity_filter_high):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_high of this SystemSettings.

        High  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_high: The intrusion_prevention_setting_event_rank_severity_filter_high of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_high = intrusion_prevention_setting_event_rank_severity_filter_high

    @property
    def platform_setting_ddan_submission_enabled(self):
        """Gets the platform_setting_ddan_submission_enabled of this SystemSettings.  # noqa: E501

        Enable submission of suspicious files to Deep Discovery Analyzer  # noqa: E501

        :return: The platform_setting_ddan_submission_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_ddan_submission_enabled

    @platform_setting_ddan_submission_enabled.setter
    def platform_setting_ddan_submission_enabled(self, platform_setting_ddan_submission_enabled):
        """Sets the platform_setting_ddan_submission_enabled of this SystemSettings.

        Enable submission of suspicious files to Deep Discovery Analyzer  # noqa: E501

        :param platform_setting_ddan_submission_enabled: The platform_setting_ddan_submission_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_ddan_submission_enabled = platform_setting_ddan_submission_enabled

    @property
    def firewall_setting_event_rank_severity_deny(self):
        """Gets the firewall_setting_event_rank_severity_deny of this SystemSettings.  # noqa: E501

        Deny  # noqa: E501

        :return: The firewall_setting_event_rank_severity_deny of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._firewall_setting_event_rank_severity_deny

    @firewall_setting_event_rank_severity_deny.setter
    def firewall_setting_event_rank_severity_deny(self, firewall_setting_event_rank_severity_deny):
        """Sets the firewall_setting_event_rank_severity_deny of this SystemSettings.

        Deny  # noqa: E501

        :param firewall_setting_event_rank_severity_deny: The firewall_setting_event_rank_severity_deny of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._firewall_setting_event_rank_severity_deny = firewall_setting_event_rank_severity_deny

    @property
    def web_reputation_setting_event_rank_risk_suspicious(self):
        """Gets the web_reputation_setting_event_rank_risk_suspicious of this SystemSettings.  # noqa: E501

        Suspicious  # noqa: E501

        :return: The web_reputation_setting_event_rank_risk_suspicious of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._web_reputation_setting_event_rank_risk_suspicious

    @web_reputation_setting_event_rank_risk_suspicious.setter
    def web_reputation_setting_event_rank_risk_suspicious(self, web_reputation_setting_event_rank_risk_suspicious):
        """Sets the web_reputation_setting_event_rank_risk_suspicious of this SystemSettings.

        Suspicious  # noqa: E501

        :param web_reputation_setting_event_rank_risk_suspicious: The web_reputation_setting_event_rank_risk_suspicious of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._web_reputation_setting_event_rank_risk_suspicious = web_reputation_setting_event_rank_risk_suspicious

    @property
    def intrusion_prevention_setting_event_rank_severity_filter_low(self):
        """Gets the intrusion_prevention_setting_event_rank_severity_filter_low of this SystemSettings.  # noqa: E501

        Low  # noqa: E501

        :return: The intrusion_prevention_setting_event_rank_severity_filter_low of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._intrusion_prevention_setting_event_rank_severity_filter_low

    @intrusion_prevention_setting_event_rank_severity_filter_low.setter
    def intrusion_prevention_setting_event_rank_severity_filter_low(self, intrusion_prevention_setting_event_rank_severity_filter_low):
        """Sets the intrusion_prevention_setting_event_rank_severity_filter_low of this SystemSettings.

        Low  # noqa: E501

        :param intrusion_prevention_setting_event_rank_severity_filter_low: The intrusion_prevention_setting_event_rank_severity_filter_low of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._intrusion_prevention_setting_event_rank_severity_filter_low = intrusion_prevention_setting_event_rank_severity_filter_low

    @property
    def platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled(self):
        """Gets the platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled of this SystemSettings.  # noqa: E501

        Allow Tenants to control access from the Primary Tenant  # noqa: E501

        :return: The platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled

    @platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled.setter
    def platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled(self, platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled):
        """Sets the platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled of this SystemSettings.

        Allow Tenants to control access from the Primary Tenant  # noqa: E501

        :param platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled: The platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled = platform_setting_primary_tenant_allow_tenant_control_impersonation_enabled

    @property
    def integrity_monitoring_setting_event_rank_severity_low(self):
        """Gets the integrity_monitoring_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501

        Low  # noqa: E501

        :return: The integrity_monitoring_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_event_rank_severity_low

    @integrity_monitoring_setting_event_rank_severity_low.setter
    def integrity_monitoring_setting_event_rank_severity_low(self, integrity_monitoring_setting_event_rank_severity_low):
        """Sets the integrity_monitoring_setting_event_rank_severity_low of this SystemSettings.

        Low  # noqa: E501

        :param integrity_monitoring_setting_event_rank_severity_low: The integrity_monitoring_setting_event_rank_severity_low of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_event_rank_severity_low = integrity_monitoring_setting_event_rank_severity_low

    @property
    def integrity_monitoring_setting_event_rank_severity_critical(self):
        """Gets the integrity_monitoring_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501

        Critical  # noqa: E501

        :return: The integrity_monitoring_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501
        :rtype: SettingValue
        """
        return self._integrity_monitoring_setting_event_rank_severity_critical

    @integrity_monitoring_setting_event_rank_severity_critical.setter
    def integrity_monitoring_setting_event_rank_severity_critical(self, integrity_monitoring_setting_event_rank_severity_critical):
        """Sets the integrity_monitoring_setting_event_rank_severity_critical of this SystemSettings.

        Critical  # noqa: E501

        :param integrity_monitoring_setting_event_rank_severity_critical: The integrity_monitoring_setting_event_rank_severity_critical of this SystemSettings.  # noqa: E501
        :type: SettingValue
        """

        self._integrity_monitoring_setting_event_rank_severity_critical = integrity_monitoring_setting_event_rank_severity_critical

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
