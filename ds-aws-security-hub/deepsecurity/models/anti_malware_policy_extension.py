# coding: utf-8

"""
    Trend Micro Deep Security API

    Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 11.2.225
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AntiMalwarePolicyExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'real_time_scan_configuration_id': 'int',
        'real_time_scan_schedule_id': 'int',
        'manual_scan_configuration_id': 'int',
        'scheduled_scan_configuration_id': 'int'
    }

    attribute_map = {
        'state': 'state',
        'real_time_scan_configuration_id': 'realTimeScanConfigurationID',
        'real_time_scan_schedule_id': 'realTimeScanScheduleID',
        'manual_scan_configuration_id': 'manualScanConfigurationID',
        'scheduled_scan_configuration_id': 'scheduledScanConfigurationID'
    }

    def __init__(self, state=None, real_time_scan_configuration_id=None, real_time_scan_schedule_id=None, manual_scan_configuration_id=None, scheduled_scan_configuration_id=None):  # noqa: E501
        """AntiMalwarePolicyExtension - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._real_time_scan_configuration_id = None
        self._real_time_scan_schedule_id = None
        self._manual_scan_configuration_id = None
        self._scheduled_scan_configuration_id = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if real_time_scan_configuration_id is not None:
            self.real_time_scan_configuration_id = real_time_scan_configuration_id
        if real_time_scan_schedule_id is not None:
            self.real_time_scan_schedule_id = real_time_scan_schedule_id
        if manual_scan_configuration_id is not None:
            self.manual_scan_configuration_id = manual_scan_configuration_id
        if scheduled_scan_configuration_id is not None:
            self.scheduled_scan_configuration_id = scheduled_scan_configuration_id

    @property
    def state(self):
        """Gets the state of this AntiMalwarePolicyExtension.  # noqa: E501

        Settings related to the Anti-Malware module.  # noqa: E501

        :return: The state of this AntiMalwarePolicyExtension.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AntiMalwarePolicyExtension.

        Settings related to the Anti-Malware module.  # noqa: E501

        :param state: The state of this AntiMalwarePolicyExtension.  # noqa: E501
        :type: str
        """
        allowed_values = ["on", "off"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def real_time_scan_configuration_id(self):
        """Gets the real_time_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501

        ID of the Real Time Scan Configuration.  # noqa: E501

        :return: The real_time_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501
        :rtype: int
        """
        return self._real_time_scan_configuration_id

    @real_time_scan_configuration_id.setter
    def real_time_scan_configuration_id(self, real_time_scan_configuration_id):
        """Sets the real_time_scan_configuration_id of this AntiMalwarePolicyExtension.

        ID of the Real Time Scan Configuration.  # noqa: E501

        :param real_time_scan_configuration_id: The real_time_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501
        :type: int
        """

        self._real_time_scan_configuration_id = real_time_scan_configuration_id

    @property
    def real_time_scan_schedule_id(self):
        """Gets the real_time_scan_schedule_id of this AntiMalwarePolicyExtension.  # noqa: E501

        ID of the Real Time Schedule.  # noqa: E501

        :return: The real_time_scan_schedule_id of this AntiMalwarePolicyExtension.  # noqa: E501
        :rtype: int
        """
        return self._real_time_scan_schedule_id

    @real_time_scan_schedule_id.setter
    def real_time_scan_schedule_id(self, real_time_scan_schedule_id):
        """Sets the real_time_scan_schedule_id of this AntiMalwarePolicyExtension.

        ID of the Real Time Schedule.  # noqa: E501

        :param real_time_scan_schedule_id: The real_time_scan_schedule_id of this AntiMalwarePolicyExtension.  # noqa: E501
        :type: int
        """

        self._real_time_scan_schedule_id = real_time_scan_schedule_id

    @property
    def manual_scan_configuration_id(self):
        """Gets the manual_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501

        ID of the Manual Scan Configuration.  # noqa: E501

        :return: The manual_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501
        :rtype: int
        """
        return self._manual_scan_configuration_id

    @manual_scan_configuration_id.setter
    def manual_scan_configuration_id(self, manual_scan_configuration_id):
        """Sets the manual_scan_configuration_id of this AntiMalwarePolicyExtension.

        ID of the Manual Scan Configuration.  # noqa: E501

        :param manual_scan_configuration_id: The manual_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501
        :type: int
        """

        self._manual_scan_configuration_id = manual_scan_configuration_id

    @property
    def scheduled_scan_configuration_id(self):
        """Gets the scheduled_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501

        ID of the Scheduled Scan Configuration.  # noqa: E501

        :return: The scheduled_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_scan_configuration_id

    @scheduled_scan_configuration_id.setter
    def scheduled_scan_configuration_id(self, scheduled_scan_configuration_id):
        """Sets the scheduled_scan_configuration_id of this AntiMalwarePolicyExtension.

        ID of the Scheduled Scan Configuration.  # noqa: E501

        :param scheduled_scan_configuration_id: The scheduled_scan_configuration_id of this AntiMalwarePolicyExtension.  # noqa: E501
        :type: int
        """

        self._scheduled_scan_configuration_id = scheduled_scan_configuration_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AntiMalwarePolicyExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AntiMalwarePolicyExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
