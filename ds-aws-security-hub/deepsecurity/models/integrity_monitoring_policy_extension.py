# coding: utf-8

"""
    Trend Micro Deep Security API

    Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 11.2.225
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IntegrityMonitoringPolicyExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'rule_ids': 'list[int]'
    }

    attribute_map = {
        'state': 'state',
        'rule_ids': 'ruleIDs'
    }

    def __init__(self, state=None, rule_ids=None):  # noqa: E501
        """IntegrityMonitoringPolicyExtension - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._rule_ids = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if rule_ids is not None:
            self.rule_ids = rule_ids

    @property
    def state(self):
        """Gets the state of this IntegrityMonitoringPolicyExtension.  # noqa: E501

        Settings related to the Integrity Monitoring module.  # noqa: E501

        :return: The state of this IntegrityMonitoringPolicyExtension.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IntegrityMonitoringPolicyExtension.

        Settings related to the Integrity Monitoring module.  # noqa: E501

        :param state: The state of this IntegrityMonitoringPolicyExtension.  # noqa: E501
        :type: str
        """
        allowed_values = ["real-time", "on", "off"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def rule_ids(self):
        """Gets the rule_ids of this IntegrityMonitoringPolicyExtension.  # noqa: E501

        IDs of the assigned Integrity Monitoring rules.  # noqa: E501

        :return: The rule_ids of this IntegrityMonitoringPolicyExtension.  # noqa: E501
        :rtype: list[int]
        """
        return self._rule_ids

    @rule_ids.setter
    def rule_ids(self, rule_ids):
        """Sets the rule_ids of this IntegrityMonitoringPolicyExtension.

        IDs of the assigned Integrity Monitoring rules.  # noqa: E501

        :param rule_ids: The rule_ids of this IntegrityMonitoringPolicyExtension.  # noqa: E501
        :type: list[int]
        """

        self._rule_ids = rule_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrityMonitoringPolicyExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrityMonitoringPolicyExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
